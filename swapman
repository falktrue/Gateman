#!/usr/bin/python
import re
import csv
import ipaddress

intf_suffix = ['_lte-vlan1', '_Li-vlan1', '_sgi-vlan1', '_sgi-v6vlan1', '_sgi_volte-vlan1', '_sgi_volte-v6vlan1', '_lte-vlan2', '_Li-vlan2', '_sgi-vlan2', '_sgi-v6vlan2', '_sgi_volte-vlan2', '_sgi_volte-v6vlan2', '_lte-loop', '_pgw-s5-up-loop', '_sgw-s5-up-loop', '_sx-c-up-loop', '_sx-u-up-loop', '_s1u-loop', '_Li-loop', '_sgi-loop', '_sgi_volte-loop', '_orion-loop']
intf_list = []
net_list = []
side_list = []
card = []
host_list = []
upf_list = []
upcis_list = []

re_vlan = re.compile(r"(vlan)")
match_vlan = [ m.group(1) for m in (re_vlan.search(line) for line in intf_suffix) if m ]
intf_count = int(len(match_vlan) / 2)
# Compiles RE from a list, with word boundaries and all
rel_vlan = re.compile(r'\b(?:%s)\b' % '|'.join(intf_suffix))

# User interaction. Ask questions, get answers. Mostly.
print('Quantidade de VPC-SI deste site.')
while True:
    try:
        cp_qty = int(input("Entre com o número de UPCIS: "))
    except ValueError:
        print("Sorry. Remove boxing gloves")
        continue
    if cp_qty < 0:
        print("Sorry, don't be negative.")
        continue
    if cp_qty == 0:
        print("99 problemas, mas a compute não é 1.")
        continue
    else:
        break

site_name = str(input("Entre com o nome do site da Claro: "))


for y in range(cp_qty):
    u = 1
    for x in range(intf_count):
        A_side = (str(u) + '/10')
        side_list.append(A_side)
        card.append('card-'+str(u))
    u = 1
    for y in range(intf_count):
        B_side = (str(u) + '/11')
        side_list.append(B_side)
        card.append('card-'+str(u))

for y in range(cp_qty):
    intf_list.append('upf' + str(y+1))
    upf_list.append('upf' + str(y+1))
    if y < 9:
        upcis_list.append('UPCIS0' + str(y+1))
    else:
        upcis_list.append('UPCIS' + str(y+1))

intf_list = [y for x in intf_list for y in (x,)* (len(intf_suffix))]
intf_suffix = intf_suffix * cp_qty
intf_list = list(map(''.join, zip(intf_list,intf_suffix)))

with open('/home/falk/swap.csv') as csvfile:
    reader = csv.reader(csvfile, delimiter=';')
    for row in reader:
        vrf_col = row[0]
        vlan_col = row[1]
        if rel_vlan.search(vrf_col):
            match_vrf = re.findall(rel_vlan, vrf_col)
            try:
                net_list.append(str(ipaddress.ip_address(vlan_col)))
            except ValueError:
                break

for i in range(2, cp_qty + 2):
    for y in (net_list):
        host = str(ipaddress.ip_address(y) + i)
        host_list.append(host)

# print(net_list)
# print(intf_suffix)
# print(side_list)
# print(card)
# print("\n")

listafile = []
new_file_content = ""
dictfromto = dict(zip(intf_list, host_list))

for x in range(cp_qty):
    listafile.append('/home/falk/slide' + str(x+4)+'.xml')
    x = x + 1

for x in range(len(listafile)):
    reading_file = open(listafile[x], "r")
    for pingas in reading_file.readlines():
        pingas = pingas.replace("upfx", upf_list[x]).replace("sitename", site_name).replace("UPCIS0x", upcis_list[x])
        new_file_content += pingas
    reading_file.close()
    writing_file = open(listafile[x], "w")
    writing_file.write(new_file_content)
    new_file_content = ""
    writing_file.close()

for x in range(len(listafile)):
    reading_file = open(listafile[x], "r")
    for pingas in reading_file.readlines():
        for k, v in dictfromto.items():
            pingas = pingas.replace(k, v)
        new_file_content += pingas
    reading_file.close()
    writing_file = open(listafile[x], "w")
    writing_file.write(new_file_content)
    new_file_content = ""
    writing_file.close()
